__author__ = 'jshoham'

# This script processes raw data that is generated by running solver trials.
# A table of averaged data is generated and outputted to 'all_processed_data.txt'
#
# To accomplish this, follow this procedure:
# For a given glob pattern, load all files that match the pattern.
# (a glob pattern is similar to a path name except it takes special '*', '?', and '[]'
#   symbols. This allows matching multiple files, for example "trials/*_raw_data.txt".)
# For each file loaded in this way, do the following:
# Extract the m value (contained in the filename, ie 'gen_n9_m{M_VALUE}_1000_raw_data.txt').
# Average all data contained in the file.
# Add the m value and averaged data as an entry into a growing list of overall collected data.
#   An entry should look something like this:
#       [m_value, avg_total_time, avg_init_time, avg_search_time, avg_assignments, avg_solution_freq, avg_timeout_freq]
# Once finished, output a text file containing all the processed entries in a table format.

import sys
import os
import glob
import re
from src import rw


def isfloat(s):
    try:
        float(s)
        return True
    except:
        return False


def convert(s):
    """Converts a given string to either a float, True, False, or returns the original string."""
    if isfloat(s):
        return float(s)
    elif s == 'True':
        return True
    elif s == 'False':
        return False
    else:
        return s


def process(filepath):
    print 'Processing: ' + filepath
    m_value = re.search('_m\d*', filepath).group()[2:]

    file_data = [entry.split() for entry in rw.read_file(filepath).splitlines()]

    # averages[0] - time_overall_start
    # averages[1] - time_search_start
    # averages[2] - time_end
    # averages[3] - assignments
    # averages[4] - solution
    # averages[5] - timeout
    averages = [sum(col) / float(len(col)) for col in
                [[convert(s) for s in category[1:]] for category in zip(*file_data)]]

    avg_total_time = format(averages[2] - averages[0], '.2f')
    avg_init_time = format(averages[1] - averages[0], '.2f')
    avg_search_time = format(averages[2] - averages[1], '.2f')
    avg_assignments = format(averages[3], '.2f')
    avg_solution_freq = format(averages[4], '.3f')
    avg_timeout_freq = format(averages[5], '.3f')

    return [m_value, avg_total_time, avg_init_time, avg_search_time,
            avg_assignments, avg_solution_freq, avg_timeout_freq]


def main(*args):
    if len(args) != 1:
        print "process_results.py requires exactly one parameter ({} given).".format(len(args))
        exit(-1)

    glob_pattern = args[0]
    files = glob.glob(glob_pattern)
    directory = os.path.split(os.path.commonprefix(files))[0]  # The lowest common directory

    column_headers = [['m_value', 'total_time', 'init_time', 'search_time',
                       'assignments', 'solution_freq', 'timeout_freq']]

    processed_data = column_headers + [process(file) for file in files]

    processed_data = rw.adjust_col_widths(processed_data)

    output_filepath = os.path.join(directory, 'all_processed_data.txt')
    output_str = '\n'.join('\t'.join(entry) for entry in processed_data)
    rw.write_file(output_filepath, output_str, rw.OVERWRITE)


if __name__ == "__main__":
    main(*sys.argv[1:])